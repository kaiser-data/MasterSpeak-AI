name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'backend/**'
      - 'requirements.txt'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'requirements.txt'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test environment
      run: |
        cat > .env.test << EOF
        ENV=testing
        DEBUG=false
        DATABASE_URL=sqlite:///./test_data/test.db
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        SECRET_KEY=test-secret-key-for-ci-backend
        RESET_SECRET=test-reset-secret-for-ci-backend
        VERIFICATION_SECRET=test-verification-secret-for-ci-backend
        ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000
        JWT_LIFETIME_SECONDS=3600
        # Rate limiting configuration for backend CI
        RATE_LIMIT_ENABLED=true
        RATE_LIMIT_DEFAULT=100/minute
        RATE_LIMIT_AUTH=10/minute
        RATE_LIMIT_ANALYSIS=20/minute
        RATE_LIMIT_UPLOAD=15/minute
        RATE_LIMIT_HEALTH=500/minute
        REDIS_URL=redis://localhost:6379/1
        EOF

    - name: Initialize test database
      run: |
        mkdir -p test_data
        python -m backend.seed_db
      env:
        ENV: testing

    - name: Run unit tests
      run: |
        python -m pytest test/ -v --tb=short
      env:
        ENV: testing

    - name: Run rate limiting tests
      run: |
        python -m pytest test/unit/test_rate_limiting.py -v
      env:
        ENV: testing

    - name: Test backend startup
      run: |
        timeout 30s python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/api/status
      env:
        ENV: testing

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
        
  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend image
      run: |
        docker build -f backend/Dockerfile -t masterspeak-backend:latest .
        
    - name: Test Docker image
      run: |
        docker run -d --name test-backend \
          -p 8000:8000 \
          -e ENV=testing \
          -e DATABASE_URL=sqlite:///./test_data/test.db \
          -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
          -e SECRET_KEY=test-docker-secret \
          -e RESET_SECRET=test-docker-reset \
          -e VERIFICATION_SECRET=test-docker-verification \
          -e RATE_LIMIT_ENABLED=true \
          -e RATE_LIMIT_DEFAULT=100/minute \
          masterspeak-backend:latest
          
        sleep 15
        curl -f http://localhost:8000/health
        docker stop test-backend
        docker rm test-backend